#!/usr/bin/env python3

# The original author of this program, "till", is StarBrilliant.
# This file is released under General Public License version 3.
# You should have received a copy of General Public License text alongside with
# this program. If not, you can obtain it at http://gnu.org/copyleft/gpl.html .
# This program comes with no warranty, the author will not be resopnsible for
# any damage or problems caused by this program.

import math
import os
import sys
import time
import parsedatetime  # https://pypi.python.org/pypi/parsedatetime


def format_time(unix_time):
    return time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(unix_time)) + '.%09.0f' % (unix_time % 1 * 1000000000)


def main():
    if len(sys.argv) < 3:
        sys.stdout.write(
            'Usage: %s [-q] TIME[.FRAC] COMMAND [ARGS ...]\n'
            '\n'
            'This program will wait until TIME, then execute COMMAND.'
            '\n'
            'TIME is a time specification that is understood by python-dateparser.\n'
            'FRAC may be a number to specify a time more precise than a second.\n'
            '\n'
            'If you specify -q, time check information will not be displayed.\n'
            '\n'
            'Warning: This program is not garanteed to be DST aware or leap second aware.\n\n'
        )
        return

    if sys.argv[1] == '-q':
        quiet = True
        spec_str = sys.argv[2]
        command = sys.argv[3:]
    else:
        quiet = False
        spec_str = sys.argv[1]
        command = sys.argv[2:]
    if '.' in spec_str:
        spec, frac = spec_str.rsplit('.', 1)
    else:
        spec, frac = spec_str, 0
    preset, confidence = parsedatetime.Calendar().parse(spec)
    if confidence == 0:
        sys.stderr.write('Invalid time specification: %s\n' % spec_str)
        sys.exit(1)
    if frac:
        if frac[0] != '-':
            frac = float('.' + frac)
        else:
            frac = float('-.' + frac[1:])
    preset = time.mktime(preset) + frac
    if not quiet:
        sys.stderr.write('Preset: %s\n' % format_time(preset))

    while True:
        now = time.time()
        if now >= preset:
            if not quiet:
                sys.stderr.write('Now:    %s\nExecuting: %s\n\n' % (format_time(now), ' '.join(command)))
            os.execvp(command[0], command)
            assert OSError('can not exec %s' % command[0])

        delta = preset - now
        if delta >= 2.0:
            if not quiet:
                sys.stderr.write('Check:  %s\n' % format_time(now))
            time.sleep(int(delta)//2)
        elif delta >= 0.05:
            time.sleep(delta/2)


if __name__ == '__main__':
    main()
